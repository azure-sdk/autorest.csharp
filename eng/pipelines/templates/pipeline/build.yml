parameters:
  - name: BuildAlphaVersion
    type: boolean
  - name: UseTypeSpecNext
    type: boolean
  - name: IncludeTestStage
    type: boolean
  - name: PublishPackages
    type: boolean
  - name: PublishDependsOn
    type: object
  - name: PublishTarget
    type: string

variables:
  NugetSecurityAnalysisWarningLevel: none

stages:
- stage: Build
  ${{ if eq(parameters.UseTypeSpecNext, true) }}:
    displayName: Update and Build
  ${{ else }}:
    displayName: Build
  jobs:
  - job: Build
    steps:
    # validate parameters
    - ${{ if and(eq(parameters.PublishPackages, true), notIn(parameters.PublishTarget, 'npmjs.org', 'internal')) }}:
      - pwsh: |
          Write-Error "The PublishTarget parameter must be 'npmjs.org' or 'internal'."
          exit 1
    # prepare
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        useGlobalJson: true
        performMultiLevelLookup: true
    - task: NodeTool@0
      displayName: Install Node 18.x
      inputs:
        versionSpec: '18.x'
    # build
    - ${{ if eq(parameters.UseTypeSpecNext, true) }}:
      - pwsh: eng/Update-TypeSpecVersions.ps1
        displayName: Run eng/Update-TypeSpecVersions.ps1
      - publish: artifacts/package-json
        displayName: Publish artifact package-json
        artifact: package-json
    - ${{ else }}:
      - pwsh: eng/init.ps1
        displayName: Run eng/init.ps1
    - pwsh: eng/build.ps1 -BuildNumber '$(Build.BuildNumber)' -BuildAlphaVersion:$${{ parameters.BuildAlphaVersion }}
      displayName: Run eng/build.ps1
    - publish: artifacts/packages
      displayName: Publish artifact packages
      artifact: packages

- ${{ if eq(parameters.IncludeTestStage, true) }}:
  - stage: Test
    dependsOn:
    - ${{ if parameters.UseTypeSpecNext }}:
      - Build
    jobs:
    - job: UnitTest
      displayName: Unit Test
      dependsOn: []
      steps:
      # prepare
      - task: UseDotNet@2
        displayName: Use .NET Core SDK
        inputs:
          useGlobalJson: true
          performMultiLevelLookup: true
      - task: NodeTool@0
        displayName: Install Node 18.x
        inputs:
          versionSpec: 18.x
      - ${{ if parameters.UseTypeSpecNext }}:
        - download: current
          artifact: package-json
          displayName: Download artifact package-json
        - pwsh: eng/init.ps1 -PackageJsonArtifacts '$(Pipeline.Workspace)/package-json'
          displayName: Run eng/init.ps1
      - ${{ else }}:
        - pwsh: eng/init.ps1
          displayName: Run eng/init.ps1
      # test
      - pwsh: eng/test.ps1
        displayName: Run eng/test.ps1
      - publish: artifacts/logs
        displayName: Publish artifact logs
        artifact: logs
        condition: succeededOrFailed()
    - job: CheckCodeGeneration
      displayName: Check Code Generation
      dependsOn: []
      strategy:
        matrix:
          "A_B":
            filter: "^[a-b]"
          "C_L":
            filter: "^[c-l]"
          "M_N":
            filter: "^[m-n]"
          "O_Z":
            filter: "^[o-z]"
      steps:
      # prepare
      - task: NodeTool@0
        displayName: "Install Node 18.x"
        inputs:
          versionSpec: '18.x'
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK'
        inputs:
          useGlobalJson: true
          performMultiLevelLookup: true
      - ${{ if parameters.UseTypeSpecNext }}:
        - download: current
          artifact: package-json
          displayName: Download artifact package-json
        - pwsh: eng/init.ps1 -PackageJsonArtifacts '$(Pipeline.Workspace)/package-json'
          displayName: Run eng/init.ps1
      - ${{ else }}:
        - pwsh: eng/init.ps1
          displayName: Run eng/init.ps1
      # test
      - pwsh: eng/CodeGenerationCheck.ps1 -Filter '$(filter)'
        displayName: Run eng/CodeGenerationCheck.ps1

- ${{ if eq(parameters.PublishPackages, true) }}:
  - stage: Publish
    dependsOn:
    - ${{ parameters.PublishDependsOn }}
    jobs:
    - job: Publish
      steps:
      - download: current
        artifact: build-artifacts
      - ${{ if eq(parameters.PublishTarget, 'npmjs.org') }}:
        - pwsh: |
            Write-Host 'This would have published to npmjs.org, but we are not doing that yet.'
        # - task: Npm@1
        #   inputs:
        #     command: 'publish'
        #     publishRegistry: 'useExternalRegistry'
        #     publishEndpoint: 'npmjs.org - azure-sdk'
        #     workingDir: $(Pipeline.Workspace)\packages
      - ${{ elseif eq(parameters.PublishTarget, 'internal') }}:
        - task: Npm@1
          inputs:
            command: publish
            publishRegistry: useFeed
            publishFeed: 29ec6040-b234-4e31-b139-33dc4287b756/05efbea8-6e52-49dd-ad3d-ac3d4aa65036 # public/azure-sdk-for-js-test-autorest
            workingDir: $(Pipeline.Workspace)\packages
      - ${{ else }}:
        - pwsh: |
            Write-Host 'This should not be possible because the parameter validation should have failed.'
  - stage: Consume
    dependsOn: Publish
    jobs:
    - job: Update_Emitter_Version
      steps:
      - download: current
        artifact: build-artifacts
